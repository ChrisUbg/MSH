Metadata-Version: 2.4
Name: msh-commissioning-server
Version: 1.0.0
Summary: Native PC application for Matter device commissioning
Home-page: https://github.com/your-repo/msh-commissioning-server
Author: MSH Team
Author-email: team@msh-project.com
Project-URL: Bug Reports, https://github.com/your-repo/msh-commissioning-server/issues
Project-URL: Source, https://github.com/your-repo/msh-commissioning-server
Project-URL: Documentation, https://github.com/your-repo/msh-commissioning-server/blob/main/README.md
Keywords: matter,smart-home,commissioning,bluetooth,iot
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Home Automation
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: fastapi==0.104.1
Requires-Dist: uvicorn[standard]==0.24.0
Requires-Dist: pydantic==2.5.0
Requires-Dist: pyyaml==6.0.1
Requires-Dist: aiosqlite==0.19.0
Requires-Dist: websockets==12.0
Requires-Dist: httpx==0.25.2
Requires-Dist: cryptography>=42.0.0
Requires-Dist: pytest==7.4.3
Requires-Dist: pytest-asyncio==0.21.1
Requires-Dist: black==23.11.0
Requires-Dist: flake8==6.1.0
Requires-Dist: pyinstaller==6.2.0
Requires-Dist: platformdirs==4.1.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MSH Commissioning Server

Native PC application for Matter device commissioning with BLE support.

## Overview

The MSH Commissioning Server is a dedicated PC application that handles:
- **BLE device discovery** and scanning
- **Matter device commissioning** using chip-tool
- **Credential management** and secure storage
- **Transfer to Pi** for device control

## Architecture

```
┌─────────────────────────────────────────────────────────────┐
│                    PC Commissioning Server                  │
├─────────────────────────────────────────────────────────────┤
│  Web Interface (Port 8080)                                  │
│  ├── Device Discovery                                       │
│  ├── Commissioning Interface                                │ 
│  └── Credential Management                                  │
├─────────────────────────────────────────────────────────────┤
│  Commissioning API (Port 8081)                              │
│  ├── BLE Commissioning                                      │
│  ├── WiFi Commissioning                                     │
│  └── Credential Storage                                     │
├─────────────────────────────────────────────────────────────┤
│  Matter SDK Integration                                     │
│  ├── chip-tool (Native)                                     │
│  ├── chip-repl (Native)                                     │
│  └── BLE Stack (Direct)                                     │
├─────────────────────────────────────────────────────────────┤
│  System Integration                                         │
│  ├── Bluetooth Stack                                        │ 
│  ├── Network Stack                                          │
│  └── File System                                            │
└─────────────────────────────────────────────────────────────┘
```

## Hardware Requirements

- **PC**: Ubuntu 20.04+ or Windows 11
- **Bluetooth**: Nordic nRF52 USB or built-in BLE
- **Network**: LAN connection for Pi communication
- **Storage**: 1GB free space for dependencies

## Quick Start

### 1. Environment Setup

```bash
# Navigate to commissioning server
cd commissioning-server

# Create and activate environment
./env-switcher.sh create commissioning-server
./env-switcher.sh commissioning-server
```

### 2. Hardware Test

```bash
# Test your hardware setup
python test-hardware.py
```

### 3. Start Server

```bash
# Start the commissioning server
python main.py --debug

# Or with custom settings
python main.py --host 0.0.0.0 --port 8080 --debug
```

### 4. Access Web Interface

- **Main Interface**: http://localhost:8080
- **API Documentation**: http://localhost:8080/docs
- **Health Check**: http://localhost:8080/

## Installation

### Ubuntu/Debian

```bash
# Run installation script
chmod +x install.sh
./install.sh
```

### Windows 11

```powershell
# Run as Administrator
Set-ExecutionPolicy Bypass -Scope Process -Force
.\install.ps1
```

### Manual Installation

```bash
# Create virtual environment
python3 -m venv venv
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt
pip install -e .

# Create configuration
mkdir -p ~/.msh
cp config.yaml ~/.msh/
```

## Configuration

### Environment Variables

Create a `.env` file in the project root:

```bash
MSH_ENVIRONMENT=commissioning-server
MSH_MODE=development
MSH_LOG_LEVEL=DEBUG
MSH_HOST=0.0.0.0
MSH_PORT=8080
PI_IP=192.168.0.107
PI_USER=chregg
```

### Configuration File

The server uses `~/.msh/config.yaml` for configuration:

```yaml
server:
  host: "0.0.0.0"
  port: 8080
  debug: false

matter:
  sdk_path: "/usr/local/matter-sdk"
  chip_tool_path: "/usr/local/bin/chip-tool"
  chip_repl_path: "/usr/local/bin/chip-repl"
  fabric_id: "1"
  node_id: "112233"

bluetooth:
  adapter: "hci0"
  timeout: 30
  scan_duration: 10

storage:
  type: "sqlite"
  path: "~/.msh/credentials.db"

security:
  api_key_required: false
  allowed_hosts: ["192.168.0.0/24"]
  encrypt_credentials: true

pi:
  default_ip: "192.168.0.107"
  default_user: "chregg"
  ssh_key_path: "~/.ssh/id_ed25519"
```

## API Endpoints

### Device Discovery
```http
POST /api/devices/scan-ble
GET /api/devices/discover
```

### Commissioning
```http
POST /api/devices/commission
{
  "device_id": "string",
  "commissioning_type": "ble|wifi",
  "qr_code": "string",
  "manual_code": "string"
}
```

### Credential Management
```http
GET /api/devices/credentials
POST /api/devices/transfer-credentials
DELETE /api/devices/{device_id}/credentials
```

### Status
```http
GET /api/status
GET /
```

## Development

### Project Structure

```
commissioning-server/
├── commissioning_server/          # Main package
│   ├── core/                     # Core components
│   │   ├── config.py            # Configuration management
│   │   ├── matter_client.py     # Matter SDK integration
│   │   ├── ble_scanner.py       # BLE device scanning
│   │   ├── credential_store.py  # Credential storage
│   │   └── device_manager.py    # Device operations
│   └── __init__.py
├── main.py                       # FastAPI application
├── requirements.txt              # Python dependencies
├── setup.py                     # Package setup
├── install.sh                   # Ubuntu installation
├── install.ps1                  # Windows installation
├── env-switcher.sh              # Environment management
├── test-hardware.py             # Hardware testing
├── hardware-setup.md            # Hardware setup guide
└── README.md                    # This file
```

### Running Tests

```bash
# Activate environment
./env-switcher.sh commissioning-server

# Run tests
python -m pytest tests/

# Run hardware test
python test-hardware.py
```

### Development Mode

```bash
# Start with auto-reload
python main.py --reload --debug

# Or use uvicorn directly
uvicorn main:app --reload --host 0.0.0.0 --port 8080
```

## Troubleshooting

### Common Issues

#### 1. Bluetooth Not Working
```bash
# Check Bluetooth service
sudo systemctl status bluetooth

# Check permissions
groups $USER | grep bluetooth

# Add user to bluetooth group
sudo usermod -a -G bluetooth $USER
```

#### 2. Matter SDK Not Found
```bash
# Check if chip-tool is installed
which chip-tool

# Install Matter SDK (see hardware-setup.md)
```

#### 3. Pi Connection Issues
```bash
# Test Pi connectivity
ping 192.168.0.107

# Test SSH
ssh chregg@192.168.0.107 'echo test'
```

#### 4. Virtual Environment Issues
```bash
# Recreate virtual environment
rm -rf venv
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

### Logs

The server logs to stdout by default. For file logging:

```bash
python main.py --log-file /var/log/msh-commissioning.log
```

## Environment Management

### Using the Environment Switcher

```bash
# Show available commands
./env-switcher.sh help

# Check current status
./env-switcher.sh status

# Activate commissioning server environment
./env-switcher.sh commissioning-server

# Create new environment
./env-switcher.sh create commissioning-server
```

### Manual Environment Management

```bash
# Activate virtual environment
source venv/bin/activate

# Load environment variables
export $(cat .env | grep -v '^#' | xargs)

# Deactivate
deactivate
```

## Performance

### Expected Performance (with Nordic nRF52 USB)

- **Device Discovery**: 2-5 seconds
- **BLE Commissioning**: 10-30 seconds
- **Credential Transfer**: 1-2 seconds
- **Total Process**: 15-40 seconds per device

### Optimization

1. **USB Power Management**: Disable for Nordic devices
2. **Bluetooth Stack**: Optimize scan parameters
3. **Network**: Ensure stable LAN connection
4. **Storage**: Use SSD for credential database

## Security

### Local Network Only
- Server binds to local network interfaces
- No external internet access required
- Firewall rules for local subnet

### Credential Security
- Encrypted credential storage
- Secure transfer to Pi
- API key authentication (optional)

### Bluetooth Security
- Local Bluetooth pairing only
- No external Bluetooth access
- Secure device authentication

## Integration with Pi

### Credential Transfer
The server automatically transfers commissioned device credentials to the Raspberry Pi for ongoing control and management.

### Real-time Sync
- WebSocket connection between PC and Pi
- Real-time device state updates
- Live commissioning status

## Support

### Documentation
- [Hardware Setup Guide](hardware-setup.md)
- [API Documentation](http://localhost:8080/docs)
- [Matter SDK Guide](https://github.com/project-chip/connectedhomeip)

### Issues
- Check hardware test results
- Review server logs
- Verify network connectivity
- Test with known working devices

## License

This project is part of the MSH (Matter Smart Home) system. 
