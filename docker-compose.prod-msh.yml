version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8082
      - WEB_PORT=8082
      - DB_PORT=5434
      - MATTER_BRIDGE_PORT=8084
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "${WEB_PORT:-8082}:8082"
    volumes:
      - msh_dataprotection:/root/.aspnet/DataProtection-Keys
    networks:
      - msh-network

  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=msh
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "${DB_PORT:-5434}:5432"
    volumes:
      - msh_postgres_data:/var/lib/postgresql/data
    networks:
      - msh-network

  matter-bridge:
    build: 
      context: ./Matter
      dockerfile: Dockerfile
    environment:
      - MATTER_BRIDGE_HOST=0.0.0.0
      - MATTER_BRIDGE_PORT=8084
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "${MATTER_BRIDGE_PORT:-8084}:8084"
    networks:
      - msh-network
    depends_on:
      - web

networks:
  msh-network:
    driver: bridge

volumes:
  msh_postgres_data:
    driver: local
  msh_dataprotection:
    driver: local 