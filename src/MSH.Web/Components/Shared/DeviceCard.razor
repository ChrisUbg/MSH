@using MSH.Infrastructure.Models
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager

<div class="card device-card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">@mDevice.Name</h5>
        @if (ShowDeleteButton)
        {
            <button class="btn btn-sm btn-outline-danger" @onclick="OnDelete">
                <i class="oi oi-trash"></i>
            </button>
        }
    </div>
    <div class="card-body">
        <p class="card-text">
            <strong>Type:</strong> @mDevice.Type<br />
            <strong>ID:</strong> @mDevice.DeviceId
        </p>
        
        @if (DeviceState != null)
        {
            <div class="device-state">
                @if (mDevice.Type == "Light")
                {
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" 
                               checked="@((bool)DeviceState["isOn"])"
                               @onchange="(e) => OnToggle()" />
                        <label class="form-check-label">Power</label>
                    </div>
                    <div class="mt-2">
                        <label>Brightness: @DeviceState["brightness"]%</label>
                        <input type="range" class="form-range" min="0" max="100" 
                               value="@((int)DeviceState["brightness"])"
                               @onchange="(e) => OnBrightnessChange(e.Value)" />
                    </div>
                    <div class="mt-2">
                        <label>Color: </label>
                        <input type="color" class="form-control form-control-color" 
                               value="@((string)DeviceState["color"])"
                               @onchange="(e) => OnColorChange(e.Value)" />
                    </div>
                }
                else if (mDevice.Type == "TemperatureSensor")
                {
                    <div class="sensor-readings">
                        <p>Temperature: @DeviceState["temperature"]Â°C</p>
                        <p>Humidity: @DeviceState["humidity"]%</p>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-warning">Loading device state...</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public required mDevice mDevice { get; set; }

    [Parameter]
    public Dictionary<string, object>? DeviceState { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; } = true;

    [Parameter]
    public EventCallback<string> OnDeleteRequested { get; set; }

    [Parameter]
    public EventCallback OnToggleRequested { get; set; }

    [Parameter]
    public EventCallback<object> OnBrightnessChangeRequested { get; set; }

    [Parameter]
    public EventCallback<object> OnColorChangeRequested { get; set; }

    private async Task OnDelete()
    {
        await OnDeleteRequested.InvokeAsync(mDevice.DeviceId.ToString());
    }

    private async Task OnToggle()
    {
        await OnToggleRequested.InvokeAsync();
    }

    private async Task OnBrightnessChange(object? value)
    {
        if (value is int brightness && mDevice != null)
        {
            await OnBrightnessChangeRequested.InvokeAsync(value);
        }
    }

    private async Task OnColorChange(object? value)
    {
        if (value is string color && mDevice != null)
        {
            await OnColorChangeRequested.InvokeAsync(value);
        }
    }
} 