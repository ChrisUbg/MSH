@page "/devices"
@using MSH.Infrastructure.Entities
@inject IDeviceService DeviceService
@inject IRoomService RoomService
@inject NavigationManager NavigationManager

<PageTitle>Device Management</PageTitle>

<div class="container">
    <h1>Device Management</h1>

    <div class="row mb-4">
        <div class="col">
            <button class="btn btn-primary" @onclick="() => showAddDeviceModal = true">
                <i class="oi oi-plus"></i> Add Device
            </button>
        </div>
    </div>

    @if (devices == null)
    {
        <div class="alert alert-info">Loading devices...</div>
    }
    else if (!devices.Any())
    {
        <div class="alert alert-warning">No devices found. Add your first device!</div>
    }
    else
    {
        <div class="row">
            @foreach (var device in devices)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card device-card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@device.Name</h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <strong>Type:</strong> @device.DeviceType.Name<br />
                                <strong>ID:</strong> @device.Id<br />
                                <strong>Room:</strong> @device.Room.Name    
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showAddDeviceModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Device</h5>
                    <button type="button" class="btn-close" @onclick="() => showAddDeviceModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Device Name</label>
                        <input type="text" class="form-control" @bind="newDevice.Name" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Device Type</label>
                        <select class="form-select" @bind="newDevice.DeviceTypeId">
                            <option value="">-- Select a type --</option>
                            @foreach (var type in deviceTypes)
                            {
                                <option value="@type.Id">@type.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Room</label>
                        <select class="form-select" @bind="newDevice.RoomId">
                            <option value="">-- Select a room --</option>
                            @foreach (var room in rooms)
                            {
                                <option value="@room.Id">@room.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showAddDeviceModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddDevice">Add Device</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Device> devices = new();
    private List<Room> rooms = new();
    private List<DeviceType> deviceTypes = new();
    private Device newDevice = new();
    private bool showAddDeviceModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadDevices();
        deviceTypes = await DeviceService.GetDeviceTypesAsync();
        rooms = await RoomService.GetRoomsAsync();
    }

    private async Task LoadDevices()
    {
        devices = (await DeviceService.GetDevicesAsync()).ToList();
    }

    private async Task AddDevice()
    {
        // Set required fields
        newDevice.MatterDeviceId = Guid.NewGuid().ToString();
        newDevice.Status = "online";
        newDevice.LastSeen = DateTime.UtcNow;
        newDevice.Configuration = null; // or JsonDocument.Parse("{}") if required
        newDevice.CreatedAt = DateTime.UtcNow;
        newDevice.UpdatedAt = DateTime.UtcNow;
        newDevice.IsDeleted = false;
        newDevice.CreatedById = 1; // Replace with current user if available
        newDevice.UpdatedById = 1;
        await DeviceService.AddDeviceAsync(newDevice);
        showAddDeviceModal = false;
        newDevice = new Device();
        await LoadDevices();
    }
} 