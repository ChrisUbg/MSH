@page "/network-settings"
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<NetworkSettings> Logger

<PageTitle>Network Settings</PageTitle>

<div class="container mt-4">
    <h1>Network Settings</h1>
    
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Network Mode</h5>
            <p class="card-text">Current Mode: <strong>@currentMode</strong></p>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }
            
            <div class="d-flex gap-2">
                <NetworkModeButton Mode="normal" CurrentMode="@currentMode" OnModeSelected="HandleModeSelected" Disabled="@isLoading" />
                <NetworkModeButton Mode="commissioning" CurrentMode="@currentMode" OnModeSelected="HandleModeSelected" Disabled="@isLoading" />
            </div>
            @if (isLoading)
            {
                <div class="mt-2 text-info">Loading...</div>
            }
        </div>
    </div>
</div>

@code {
    private string currentMode = "Loading...";
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;
    private HttpClient? _httpClient;

    protected override void OnInitialized()
    {
        _httpClient = HttpClientFactory.CreateClient("API");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentModeAsync();
    }

    private async Task GetCurrentModeAsync()
    {
        isLoading = true;
        try
        {
            errorMessage = string.Empty;
            successMessage = string.Empty;
            if (_httpClient != null)
            {
                var response = await _httpClient.GetAsync("api/network/mode");
                if (response.IsSuccessStatusCode)
                {
                    currentMode = await response.Content.ReadAsStringAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to get current network mode: {error}";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting current network mode");
            errorMessage = "Failed to get current network mode. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleModeSelected(string mode)
    {
        isLoading = true;
        try
        {
            errorMessage = string.Empty;
            successMessage = string.Empty;
            if (_httpClient != null)
            {
                var response = await _httpClient.PostAsync($"api/network/switch/{mode}", null);
                if (response.IsSuccessStatusCode)
                {
                    currentMode = mode;
                    successMessage = $"Successfully switched to {mode} mode";
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Failed to switch to {mode} mode: {error}";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error switching to {mode} mode");
            errorMessage = $"Failed to switch to {mode} mode. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
} 