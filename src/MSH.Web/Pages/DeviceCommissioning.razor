@page "/device-commissioning"
@using System.Net.Http.Json
@using Microsoft.Extensions.Configuration
@using MSH.Infrastructure.Entities
@using MSH.Web.Services
@using MSH.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IDeviceService DeviceService
@inject IDeviceTypeService DeviceTypeService
@inject IRoomService RoomService
@inject ApplicationDbContext _context

<PageTitle>Device Commissioning - MSH</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h1>Device Commissioning</h1>
            <p class="lead">Add new Matter devices to your smart home using PC Commissioning Server</p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Commission New Device</h5>
                    <form>
                        <!-- Server Configuration Section -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="oi oi-cog"></i> Server Configuration</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="pcServerIp" class="form-label">PC Commissioning Server IP *</label>
                                    <input type="text" class="form-control" id="pcServerIp" @bind="pcServerIp" required 
                                           placeholder="192.168.0.100">
                                    <div class="form-text">IP address of your PC running the commissioning server</div>
                                </div>
                                <div class="mb-3">
                                    <label for="pcServerPort" class="form-label">PC Server Port</label>
                                    <input type="number" class="form-control" id="pcServerPort" @bind="pcServerPort" 
                                           placeholder="8080">
                                    <div class="form-text">Port for PC commissioning server (default: 8080)</div>
                                </div>
                                <div class="mb-3">
                                    <label for="piIp" class="form-label">Raspberry Pi IP *</label>
                                    <input type="text" class="form-control" id="piIp" @bind="piIp" required 
                                           placeholder="192.168.0.107">
                                    <div class="form-text">IP address of your Raspberry Pi control hub</div>
                                </div>
                            </div>
                        </div>

                        <!-- Device Information Section -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="oi oi-device-hdd"></i> Device Information</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="deviceName" class="form-label">Device Name</label>
                                    <input type="text" class="form-control" id="deviceName" @bind="deviceName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="deviceType" class="form-label">Device Type</label>
                                    <select class="form-select" id="deviceType" @bind="selectedDeviceTypeId" required>
                                        <option value="">Select a device type...</option>
                                        @foreach (var type in deviceTypes)
                                        {
                                            <option value="@type.Id">@type.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="room" class="form-label">Room (Optional)</label>
                                    <select class="form-select" id="room" @bind="selectedRoomId">
                                        <option value="">-- No Room --</option>
                                        @foreach (var room in rooms)
                                        {
                                            <option value="@room.Id">@room.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Commissioning Details Section -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="oi oi-bluetooth"></i> Commissioning Details</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="qrCode" class="form-label">QR Code *</label>
                                    <input type="text" class="form-control" id="qrCode" @bind="qrCode" required 
                                           placeholder="MT:... (full QR code string from device)">
                                    <div class="form-text">Enter the complete QR code string from your Matter device</div>
                                </div>
                                <div class="mb-3">
                                    <label for="networkSsid" class="form-label">WiFi Network Name (SSID) *</label>
                                    <input type="text" class="form-control" id="networkSsid" @bind="networkSsid" required 
                                           placeholder="Your WiFi network name">
                                    <div class="form-text">The WiFi network the device should connect to</div>
                                </div>
                                <div class="mb-3">
                                    <label for="networkPassword" class="form-label">WiFi Password *</label>
                                    <input type="password" class="form-control" id="networkPassword" @bind="networkPassword" required 
                                           placeholder="Your WiFi password">
                                    <div class="form-text">The password for the WiFi network</div>
                                </div>
                                <div class="mb-3">
                                    <label for="pin" class="form-label">Commissioning PIN (Optional)</label>
                                    <input type="text" class="form-control" id="pin" @bind="pin" placeholder="Default: 20202021">
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-info">
                            <strong>New Commissioning Workflow:</strong>
                            <ol>
                                <li>Ensure PC commissioning server is running</li>
                                <li>Put your device in pairing mode</li>
                                <li>Scan the QR code on your device or enter it manually</li>
                                <li>Enter your WiFi network details</li>
                                <li>Click "Start Commissioning" - PC server will handle BLE commissioning</li>
                                <li>After successful commissioning, credentials will be transferred to Pi</li>
                            </ol>
                        </div>
                        
                        <button type="button" class="btn btn-secondary me-2" @onclick="TestConnection">
                            Test Connection
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="HandleCommissioning" disabled="@isCommissioning">
                            @if (isCommissioning)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Commissioning...</span>
                            }
                            else
                            {
                                <span>Start Commissioning</span>
                            }
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Commissioning Status</h5>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">
                            @successMessage
                        </div>
                    }
                    @if (isCommissioning)
                    {
                        <div class="alert alert-info">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border text-primary me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <div>
                                    <strong>Commissioning in progress...</strong>
                                    <p class="mb-0">PC server is handling BLE commissioning and credential transfer to Pi.</p>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <!-- Connection Status -->
                    <div class="mt-3">
                        <h6>Connection Status</h6>
                        <div class="row">
                            <div class="col-6">
                                <small class="text-muted">PC Server:</small>
                                <div class="d-flex align-items-center">
                                    @if (pcServerConnected)
                                    {
                                        <span class="badge bg-success me-2">Connected</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger me-2">Disconnected</span>
                                    }
                                    <small>@pcServerUrl</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">Pi Hub:</small>
                                <div class="d-flex align-items-center">
                                    @if (piConnected)
                                    {
                                        <span class="badge bg-success me-2">Connected</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger me-2">Disconnected</span>
                                    }
                                    <small>@piUrl</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string deviceName = "";
    private string pin = "";
    private string qrCode = "";
    private string networkSsid = "";
    private string networkPassword = "";
    private string pcServerIp = "192.168.0.100";
    private int pcServerPort = 8080;
    private string piIp = "192.168.0.107";
    private bool isCommissioning = false;
    private string errorMessage = "";
    private string successMessage = "";
    private bool pcServerConnected = false;
    private bool piConnected = false;
    private string pcServerUrl = "";
    private string piUrl = "";
    
    private List<DeviceType> deviceTypes = new();
    private List<Room> rooms = new();
    private Guid selectedDeviceTypeId = Guid.Empty;
    private Guid? selectedRoomId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await TestConnections();
    }

    private async Task LoadData()
    {
        deviceTypes = (await DeviceTypeService.GetDeviceTypesAsync()).ToList();
        rooms = (await RoomService.GetRoomsAsync()).ToList();
        
        // Ensure we have a default device type for NOUS A8M
        await EnsureDeviceTypes();
    }

    private async Task EnsureDeviceTypes()
    {
        var nousA8MType = deviceTypes.FirstOrDefault(dt => dt.Name == "NOUS A8M Socket");
        if (nousA8MType == null)
        {
            // Create the NOUS A8M device type
            var newDeviceType = new DeviceType
            {
                Name = "NOUS A8M Socket",
                Description = "NOUS A8M 16A Smart Socket with Matter support",
                Capabilities = System.Text.Json.JsonDocument.Parse(@"{
                    ""onOff"": true,
                    ""powerMonitoring"": true,
                    ""energyMonitoring"": true,
                    ""maxPower"": 3680
                }"),
                IsSimulated = false,
                CreatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61"
            };
            
            await DeviceTypeService.AddDeviceTypeAsync(newDeviceType);
            deviceTypes.Add(newDeviceType);
            StateHasChanged();
        }
    }

    private async Task TestConnections()
    {
        await TestPCServerConnection();
        await TestPiConnection();
        StateHasChanged();
    }

    private async Task TestPCServerConnection()
    {
        try
        {
            pcServerUrl = $"http://{pcServerIp}:{pcServerPort}";
            var client = HttpClientFactory.CreateClient();
            client.Timeout = TimeSpan.FromSeconds(5);
            
            var response = await client.GetAsync($"{pcServerUrl}/api/status");
            pcServerConnected = response.IsSuccessStatusCode;
        }
        catch
        {
            pcServerConnected = false;
        }
    }

    private async Task TestPiConnection()
    {
        try
        {
            piUrl = $"http://{piIp}:8083";
            var client = HttpClientFactory.CreateClient();
            client.Timeout = TimeSpan.FromSeconds(5);
            
            var response = await client.GetAsync($"{piUrl}/");
            piConnected = response.IsSuccessStatusCode;
        }
        catch
        {
            piConnected = false;
        }
    }

    private async Task TestConnection()
    {
        await TestConnections();
        if (pcServerConnected && piConnected)
        {
            successMessage = "✅ Both PC server and Pi hub are connected!";
        }
        else
        {
            errorMessage = "❌ Connection issues detected. Please check server IPs and ensure both servers are running.";
        }
        StateHasChanged();
    }

    private async Task HandleCommissioning()
    {
        try
        {
            Console.WriteLine("HandleCommissioning called"); // Debug
            isCommissioning = true;
            errorMessage = "";
            successMessage = "";
            StateHasChanged(); // Force UI update

            // Test connections first
            await TestConnections();
            if (!pcServerConnected)
            {
                errorMessage = "PC commissioning server is not accessible. Please check the IP address and ensure the server is running.";
                return;
            }

            // Get selected device type
            var selectedDeviceType = deviceTypes.FirstOrDefault(dt => dt.Id == selectedDeviceTypeId);
            if (selectedDeviceType == null)
            {
                errorMessage = "Please select a device type.";
                StateHasChanged(); // Force UI update
                return;
            }

            Console.WriteLine($"Selected device type: {selectedDeviceType.Name}"); // Debug

            // Debug: Log the QR code being sent
            Console.WriteLine($"QR Code from UI: '{qrCode}' (length: {qrCode?.Length ?? 0})");

            // Commission device through PC commissioning server
            var request = new
            {
                device_name = deviceName,
                device_type = selectedDeviceType.Name.ToLower().Replace(" ", "_"),
                qr_code = qrCode,
                network_ssid = networkSsid,
                network_password = networkPassword,
                pin = string.IsNullOrEmpty(pin) ? "20202021" : pin,
                pi_ip = piIp,
                pi_user = "chregg"
            };

            Console.WriteLine($"Sending request to PC Commissioning Server: {System.Text.Json.JsonSerializer.Serialize(request)}"); // Debug

            var client = HttpClientFactory.CreateClient();
            var response = await client.PostAsJsonAsync($"http://{pcServerIp}:{pcServerPort}/api/devices/commission", request);
            
            Console.WriteLine($"Response status: {response.StatusCode}"); // Debug
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CommissioningResponse>();
                
                if (result != null && !string.IsNullOrEmpty(result.device_id))
                {
                    // Save device to database with user selections
                    await SaveCommissionedDevice(result, selectedDeviceType);
                    
                    successMessage = $"Device commissioned successfully! Device ID: {result.device_id}. Credentials transferred to Pi hub.";
                    // Reset form
                    deviceName = "";
                    selectedDeviceTypeId = Guid.Empty;
                    selectedRoomId = null;
                    pin = "";
                    qrCode = "";
                    networkSsid = "";
                    networkPassword = "";
                }
                else
                {
                    errorMessage = "Commissioning completed but no device ID returned.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Commissioning failed: {error}";
                Console.WriteLine($"Error response: {error}"); // Debug
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Exception in HandleCommissioning: {ex}"); // Debug
        }
        finally
        {
            isCommissioning = false;
            StateHasChanged(); // Force UI update
        }
    }

    private async Task SaveCommissionedDevice(CommissioningResponse result, DeviceType deviceType)
    {
        try
        {
            // Check if device already exists
            var existingDevice = await DeviceService.GetDeviceAsync(result.device_id);
            
            if (existingDevice != null)
            {
                // Update existing device with user selections
                existingDevice.Name = deviceName;
                existingDevice.Description = $"Commissioned {deviceType.Name} via PC server";
                existingDevice.DeviceTypeId = deviceType.Id;
                existingDevice.RoomId = selectedRoomId;
                existingDevice.Status = "commissioned";
                existingDevice.IsOnline = true;
                existingDevice.LastSeen = DateTime.UtcNow;
                existingDevice.LastStateChange = DateTime.UtcNow;
                existingDevice.UpdatedAt = DateTime.UtcNow;
                existingDevice.UpdatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61";
                
                // Update properties
                var properties = new Dictionary<string, object>
                {
                    ["commissioned_at"] = DateTime.UtcNow.ToString("O"),
                    ["commissioning_method"] = "pc-commissioning-server",
                    ["pc_server_ip"] = pcServerIp,
                    ["pi_ip"] = piIp,
                    ["node_id"] = result.node_id?.ToString() ?? "unknown"
                };
                existingDevice.Properties = System.Text.Json.JsonDocument.Parse(
                    System.Text.Json.JsonSerializer.Serialize(properties)
                );
                
                await DeviceService.UpdateDeviceAsync(existingDevice);
            }
            else
            {
                // Create new device with user selections
                var device = new Device
                {
                    Name = deviceName,
                    Description = $"Commissioned {deviceType.Name} via PC server",
                    MatterDeviceId = result.device_id,
                    DeviceTypeId = deviceType.Id,
                    RoomId = selectedRoomId,
                    Status = "commissioned",
                    IsOnline = true,
                    LastSeen = DateTime.UtcNow,
                    LastStateChange = DateTime.UtcNow,
                    Properties = System.Text.Json.JsonDocument.Parse(@"{
                        ""commissioned_at"": """ + DateTime.UtcNow.ToString("O") + @""",
                        ""commissioning_method"": ""pc-commissioning-server"",
                        ""pc_server_ip"": """ + pcServerIp + @""",
                        ""pi_ip"": """ + piIp + @""",
                        ""node_id"": """ + (result.node_id?.ToString() ?? "unknown") + @"""
                    }"),
                    Configuration = System.Text.Json.JsonDocument.Parse("{}"),
                    CreatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61",
                    UpdatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61"
                };

                await DeviceService.AddDeviceAsync(device);
            }
        }
        catch (Exception ex)
        {
            errorMessage += $" Warning: Device commissioned but failed to save to database: {ex.Message}";
        }
    }

    private class CommissioningResponse
    {
        public string status { get; set; } = "";
        public string device_id { get; set; } = "";
        public string message { get; set; } = "";
        public int? node_id { get; set; }
    }
} 