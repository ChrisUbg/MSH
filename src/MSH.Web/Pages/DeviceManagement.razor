@namespace MSH.Web.Pages
@page "/device-management"
@using MSH.Infrastructure.Entities
@using MSH.Web.Services
@using MSH.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject IDeviceService DeviceService
@inject IDeviceTypeService DeviceTypeService
@inject IRoomService RoomService
@inject NavigationManager NavigationManager
@inject ApplicationDbContext _context

<PageTitle>Device Management</PageTitle>

<div class="container">
    <h1>Device Management</h1>

    <div class="row mb-4">
        <div class="col">
            <button class="btn btn-primary" @onclick="() => showAddDeviceModal = true">
                <i class="oi oi-plus"></i> Add Device
            </button>
        </div>
    </div>

    @if (_devices == null)
    {
        <div class="alert alert-info">Loading devices...</div>
    }
    else if (!_devices.Any())
    {
        <div class="alert alert-warning">No devices found. Add your first device!</div>
    }
    else
    {
        <div class="row">
            @foreach (var device in _devices)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@device.Name</h5>
                            <p class="card-text">@device.Description</p>
                            <p class="card-text">
                                <strong>Device Type:</strong> @device.DeviceType?.Name
                            </p>
                            <p class="card-text">
                                <strong>Room:</strong> @(device.Room?.Name ?? "Unassigned")
                            </p>
                            <p class="card-text">
                                <strong>Status:</strong> @device.Status
                            </p>
                            <button class="btn btn-primary" @onclick="() => NavigateToDeviceDetails(device.MatterDeviceId)">Details</button>
                            <button class="btn btn-sm btn-info" @onclick="() => ShowAssignRoomModal(device)">Assign</button>
                            <button class="btn btn-sm btn-warning" @onclick="async () => await RemoveDeviceFromRoom(device.Id)">Remove</button>
                            <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteDevice(device.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showAddDeviceModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Device</h5>
                    <button type="button" class="btn-close" @onclick="() => showAddDeviceModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Device Name</label>
                        <input type="text" class="form-control" @bind="newDevice.Name" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Device Type</label>
                        <select class="form-select" @bind="newDevice.DeviceTypeId">
                            <option value="">-- Select a type --</option>
                            @foreach (var type in _deviceTypes)
                            {
                                <option value="@type.Id">@type.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Room</label>
                        <select class="form-select" @bind="newDevice.RoomId">
                            <option value="">-- Select a room --</option>
                            @foreach (var room in _rooms)
                            {
                                <option value="@room.Id">@room.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showAddDeviceModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="async () => await AddDevice()">Add Device</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showAssignRoomModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Device to Room</h5>
                    <button type="button" class="btn-close" @onclick="() => showAssignRoomModal = false"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Device:</strong> @selectedDevice?.Name</p>
                    <p><strong>Current Room:</strong> @(selectedDevice?.Room?.Name ?? "Unassigned")</p>
                    <div class="mb-3">
                        <label class="form-label">Select New Room</label>
                        <select class="form-select" @bind="selectedRoomId">
                            <option value="">-- Unassigned --</option>
                            @foreach (var room in _rooms)
                            {
                                <option value="@room.Id">@room.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showAssignRoomModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="async () => await AssignDeviceToRoom()">Assign</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Device> _devices = new();
    private List<DeviceType> _deviceTypes = new();
    private List<Room> _rooms = new();
    private Device newDevice = new() { DeviceTypeId = Guid.Empty, RoomId = null };
    private bool showAddDeviceModal;
    private bool showAssignRoomModal;
    private Device? selectedDevice;
    private Guid? selectedRoomId;

    protected override async Task OnInitializedAsync()
    {
        await LoadDevices();
    }

    private async Task LoadDevices()
    {
        _devices = (await DeviceService.GetDevicesAsync()).ToList();
        _deviceTypes = (await DeviceTypeService.GetDeviceTypesAsync()).ToList();
        _rooms = (await RoomService.GetRoomsAsync()).ToList();
    }

    private async Task AddDevice()
    {
        // Get the admin user's ID
        var adminUser = await _context.ApplicationUsers.FirstOrDefaultAsync(u => u.UserName == "admin");
        if (adminUser != null)
        {
            // Set required fields
            newDevice.MatterDeviceId = Guid.NewGuid().ToString();
            newDevice.Status = "online";
            newDevice.LastSeen = DateTime.UtcNow;
            newDevice.Configuration = null; // or JsonDocument.Parse("{}") if required
            newDevice.Properties = System.Text.Json.JsonDocument.Parse("{}");
            newDevice.CreatedAt = DateTime.UtcNow;
            newDevice.UpdatedAt = DateTime.UtcNow;
            newDevice.IsDeleted = false;
           // newDevice.CreatedById = adminUser.Id;
            newDevice.CreatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61";
           // newDevice.CreatedById = adminUser.Id;
            newDevice.UpdatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61";
            await DeviceService.AddDeviceAsync(newDevice);
            showAddDeviceModal = false;
            newDevice = new Device();
            await LoadDevices();
        }
        else
        {
            // Handle case where admin user doesn't exist
            // You might want to show an error message to the user
        }
    }

    private void ShowAssignRoomModal(Device device)
    {
        selectedDevice = device;
        selectedRoomId = device.RoomId;
        showAssignRoomModal = true;
    }

    private async Task AssignDeviceToRoom()
    {
        if (selectedDevice != null)
        {
            await DeviceService.AssignDeviceToRoomAsync(selectedDevice.Id, selectedRoomId);
            showAssignRoomModal = false;
            selectedDevice = null;
            selectedRoomId = null;
            await LoadDevices();
        }
    }

    private async Task RemoveDeviceFromRoom(Guid deviceId)
    {
        await DeviceService.RemoveDeviceFromRoomAsync(deviceId);
        await LoadDevices();
    }

    private async Task DeleteDevice(Guid deviceId)
    {
        await DeviceService.DeleteDeviceAsync(deviceId);
        await LoadDevices();
    }

    private void NavigateToDeviceDetails(string deviceId)
    {
        NavigationManager.NavigateTo($"/devices/{deviceId}");
    }
} 