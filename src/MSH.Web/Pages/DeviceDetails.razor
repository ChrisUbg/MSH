@namespace MSH.Web.Pages
@page "/device-details/{DeviceId:guid}"
@using Microsoft.AspNetCore.SignalR
@using MSH.Infrastructure.Entities
@using MSH.Infrastructure.Models
@using MSH.Web.Services
@using MSH.Web.Hubs
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@inject IDeviceService DeviceService
@inject IMatterDeviceControlService MatterDeviceControlService
@inject NavigationManager NavigationManager
@inject IHubContext<DeviceHub> HubContext
@inject IConfiguration Configuration

<PageTitle>Device Details</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1>Device Details</h1>
        </div>
        <div class="col-auto">
            <button class="btn btn-secondary" @onclick="@(() => NavigationManager.NavigateTo("/devices"))">
                <i class="fas fa-arrow-left"></i> Back to Devices
            </button>
        </div>
    </div>

    @if (device == null)
    {
        <div class="alert alert-info">
            Loading device details...
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Device Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" @bind="device.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Type</label>
                            <input type="text" class="form-control" value="@(device.DeviceType?.Name ?? "Unknown")" readonly />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <div>
                                <span class="badge @(device.IsOnline ? "bg-success" : "bg-danger")">
                                    @(device.IsOnline ? "Online" : "Offline")
                                </span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Room</label>
                            <input type="text" class="form-control" value="@(device.Room?.Name ?? "No Room")" readonly />
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="SaveDevice">
                            <i class="fas fa-save"></i> Save Changes
                        </button>
                    </div>
                </div>

                <!-- Device Controls Card -->
                @if (IsSocketDevice())
                {
                    <div class="card mt-4">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Device Controls</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <label class="form-label mb-0">Power Control</label>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="powerSwitch" 
                                                   checked="@isPowerOn" @onclick="TogglePower" disabled="@isControlsDisabled">
                                            <label class="form-check-label" for="powerSwitch">
                                                @(isPowerOn ? "ON" : "OFF")
                                            </label>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(controlMessage))
                                    {
                                        <div class="alert alert-info alert-dismissible fade show" role="alert">
                                            @controlMessage
                                            <button type="button" class="btn-close" @onclick="() => controlMessage = string.Empty"></button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Device State</h5>
                    </div>
                    <div class="card-body">
                        @if (currentState == null)
                        {
                            <p>No state information available.</p>
                        }
                        else
                        {
                            <div class="mb-3">
                                <label class="form-label">State Type</label>
                                <input type="text" class="form-control" value="@currentState.StateType" readonly />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">State Value</label>
                                <input type="text" class="form-control" value="@currentState.StateValue" readonly />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Last Updated</label>
                                <input type="text" class="form-control" value="@currentState.RecordedAt.ToString("g")" readonly />
                            </div>
                        }
                    </div>
                </div>

                <!-- Power Consumption Card -->
                @if (IsSocketDevice())
                {
                    <div class="card mt-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">Power Consumption</h5>
                            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshPowerMetrics" disabled="@isLoadingPowerMetrics">
                                <i class="fas fa-refresh @(isLoadingPowerMetrics ? "fa-spin" : "")"></i>
                            </button>
                        </div>
                        <div class="card-body">
                            @if (isLoadingPowerMetrics)
                            {
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                            else if (powerMetrics != null)
                            {
                                <div class="row">
                                    <div class="col-6">
                                        <div class="text-center">
                                            <h3 class="text-primary mb-1">@(powerMetrics.PowerConsumption?.ToString("F1") ?? "N/A")</h3>
                                            <small class="text-muted">Watts</small>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-center">
                                            <h5 class="text-success mb-1">@(powerMetrics.Voltage?.ToString("F1") ?? "N/A")</h5>
                                            <small class="text-muted">Volts</small>
                                        </div>
                                    </div>
                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col-6">
                                        <div class="text-center">
                                            <h6 class="text-info mb-1">@(powerMetrics.Current?.ToString("F3") ?? "N/A")</h6>
                                            <small class="text-muted">Amperes</small>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-center">
                                            <small class="text-muted">Status</small>
                                            <div>
                                                <span class="badge @(powerMetrics.PowerState == "on" ? "bg-success" : "bg-secondary")">
                                                    @(powerMetrics.PowerState?.ToUpper() ?? "UNKNOWN")
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(powerMetrics.LastUpdated))
                                {
                                    <div class="mt-2">
                                        <small class="text-muted">Last Updated: @powerMetrics.LastUpdated</small>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center text-muted">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <p class="mb-0">Power metrics unavailable</p>
                                    <small>Device may be offline or not responding</small>
                                </div>
                            }
                        </div>
                    </div>
                }

                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Recent Events</h5>
                    </div>
                    <div class="card-body">
                        @if (history == null || !history.Any())
                        {
                            <p>No recent events.</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Timestamp</th>
                                            <th>Property</th>
                                            <th>Old Value</th>
                                            <th>New Value</th>
                                            <th>Source</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var entry in history)
                                        {
                                            <tr>
                                                <td>@entry.Timestamp.ToString("g")</td>
                                                <td>@entry.PropertyName</td>
                                                <td>@entry.OldValue</td>
                                                <td>@entry.NewValue</td>
                                                <td>@entry.Source</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid DeviceId { get; set; }

    private Device? device;
    private DeviceState? currentState;
    private IEnumerable<mDeviceHistory>? history;
    
    // Power control properties
    private bool isPowerOn = false;
    private bool isControlsDisabled = false;
    private string controlMessage = string.Empty;
    
    // Power metrics properties
    private PowerMetrics? powerMetrics;
    private bool isLoadingPowerMetrics = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDeviceDetails();
            
            // Load initial power state and metrics for socket devices
            if (IsSocketDevice())
            {
                await LoadPowerState();
                await RefreshPowerMetrics();
            }
        }
        catch (Exception ex)
        {
            controlMessage = $"Error initializing device details: {ex.Message}";
        }
    }

    private bool IsSocketDevice()
    {
        return device?.DeviceType?.Name?.ToLower().Contains("socket") == true || 
               device?.DeviceType?.Name?.ToLower().Contains("plug") == true;
    }

    private async Task LoadDeviceDetails()
    {
        try
        {
            device = await DeviceService.GetDeviceByIdAsync(DeviceId);
            if (device != null)
            {
                history = await DeviceService.GetDeviceHistoryAsync(DeviceId);
            }
        }
        catch (Exception ex)
        {
            controlMessage = $"Error loading device details: {ex.Message}";
        }
    }

    private async Task SaveDevice()
    {
        if (device != null)
        {
            try
            {
                await DeviceService.UpdateDeviceAsync(device);
                await LoadDeviceDetails();
            }
            catch (Exception ex)
            {
                controlMessage = $"Error saving device: {ex.Message}";
            }
        }
    }

    private async Task LoadPowerState()
    {
        try
        {
            await RefreshPowerMetrics();
            if (powerMetrics != null)
            {
                isPowerOn = powerMetrics.PowerState == "on";
            }
        }
        catch (Exception ex)
        {
            controlMessage = $"Failed to load power state: {ex.Message}";
        }
    }

    private async Task TogglePower()
    {
        if (device?.MatterDeviceId == null)
        {
            controlMessage = "Device not configured for Matter control";
            return;
        }

        try
        {
            isControlsDisabled = true;
            
            // Use the Matter device control service to toggle the device
            var success = await MatterDeviceControlService.ToggleDeviceAsync(device.MatterDeviceId);
            
            if (success)
            {
                isPowerOn = !isPowerOn; // Toggle the state
                controlMessage = $"Device turned {(isPowerOn ? "ON" : "OFF")} successfully";
                
                // Refresh power metrics after state change
                await RefreshPowerMetrics();
            }
            else
            {
                controlMessage = "Failed to toggle device. Check if device is online and accessible.";
            }
        }
        catch (Exception ex)
        {
            controlMessage = $"Error controlling device: {ex.Message}";
        }
        finally
        {
            isControlsDisabled = false;
            StateHasChanged();
        }
    }

    private async Task RefreshPowerMetrics()
    {
        if (device?.MatterDeviceId == null) return;

        try
        {
            isLoadingPowerMetrics = true;
            
            // Use the Matter device control service to get device state
            var state = await MatterDeviceControlService.GetDeviceStateAsync(device.MatterDeviceId);
            
            if (!string.IsNullOrEmpty(state))
            {
                powerMetrics = new PowerMetrics
                {
                    DeviceId = device.MatterDeviceId,
                    PowerState = state,
                    PowerConsumption = 0, // Not available from basic onoff cluster
                    Voltage = 230.0m, // Default voltage
                    Current = 0, // Not available from basic onoff cluster
                    LastUpdated = DateTime.UtcNow.ToString("O")
                };
                
                // Update power state from metrics
                isPowerOn = powerMetrics.PowerState == "on";
            }
            else
            {
                powerMetrics = null;
            }
        }
        catch (Exception ex)
        {
            powerMetrics = null;
            controlMessage = $"Error refreshing power metrics: {ex.Message}";
        }
        finally
        {
            isLoadingPowerMetrics = false;
            StateHasChanged();
        }
    }

    // Data models for API responses
    public class PowerControlResponse
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public string? PowerState { get; set; }
        public string? DeviceId { get; set; }
    }

    public class DeviceStateResponse
    {
        public string? DeviceId { get; set; }
        public string? State { get; set; }
        public decimal? PowerConsumption { get; set; }
        public string? Message { get; set; }
    }

    public class PowerMetrics
    {
        public string? DeviceId { get; set; }
        public string? PowerState { get; set; }
        public decimal? PowerConsumption { get; set; }
        public decimal? Voltage { get; set; }
        public decimal? Current { get; set; }
        public string? LastUpdated { get; set; }
    }
} 