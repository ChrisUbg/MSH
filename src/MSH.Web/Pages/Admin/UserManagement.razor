@namespace MSH.Web.Pages
@page "/admin/users"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using MSH.Infrastructure.Entities
@using MSH.Infrastructure.Data
@attribute [Authorize(Roles = "Admin")]

<PageTitle>User Management - MSH</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>User Management</h2>
        </div>
    </div>

    @if (_users == null)
    {
        <div class="alert alert-info">Loading users...</div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Last Login</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in _users)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        <select class="form-select" value="@user.Role" @onchange="e => UpdateUserRole(user, e.Value?.ToString())">
                                            <option value="Guest" selected="@(user.Role == "Guest")">Guest</option>
                                            <option value="Standard" selected="@(user.Role == "Standard")">Standard</option>
                                            <option value="Admin" selected="@(user.Role == "Admin")">Admin</option>
                                        </select>
                                    </td>
                                    <td>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" checked="@user.IsActive" 
                                                   @onchange="e => ToggleUserStatus(user, e.Value)" />
                                        </div>
                                    </td>
                                    <td>@user.LastLogin?.ToString("g")</td>
                                    <td>
                                        <button class="btn btn-sm btn-warning" @onclick="() => ShowResetPasswordModal(user)">
                                            Reset Password
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(user)">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@if (_showResetPasswordModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reset Password</h5>
                    <button type="button" class="btn-close" @onclick="CloseResetPasswordModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" @bind="_newPassword" />
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" @bind="_confirmPassword" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseResetPasswordModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ResetPassword">Reset Password</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_showDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this user?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUser">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<UserViewModel>? _users;
    private bool _showResetPasswordModal;
    private bool _showDeleteModal;
    private UserViewModel? _userToDelete;
    private string _newPassword = "";
    private string _confirmPassword = "";

    [Inject] private UserManager<IdentityUser> UserManager { get; set; } = default!;
    [Inject] private ApplicationDbContext DbContext { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var users = await DbContext.ApplicationUsers.ToListAsync();
            var identityUsers = await UserManager.Users.ToListAsync();

            _users = users.Select(u =>
            {
                var identityUser = identityUsers.FirstOrDefault(iu => iu.Email == u.Email);
                string role = "Guest"; // Default role

                if (identityUser != null)
                {
                    var roles = UserManager.GetRolesAsync(identityUser).Result;
                    role = roles.FirstOrDefault() ?? "Guest";
                }

                return new UserViewModel
                {
                    Id = u.Id,
                    UserName = u.UserName,
                    Email = u.Email,
                    Role = role,
                    IsActive = u.IsActive,
                    LastLogin = u.LastLogin
                };
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex}");
            _users = new List<UserViewModel>();
        }
    }

    private async Task UpdateUserRole(UserViewModel user, string? newRole)
    {
        if (string.IsNullOrEmpty(newRole)) return;

        try
        {
            var identityUser = await UserManager.FindByEmailAsync(user.Email);
            if (identityUser == null) return;

            // Get current roles
            var currentRoles = await UserManager.GetRolesAsync(identityUser);
            
            // Remove all current roles
            await UserManager.RemoveFromRolesAsync(identityUser, currentRoles);
            
            // Add new role
            await UserManager.AddToRoleAsync(identityUser, newRole);

            // Update the user's role in the view model
            user.Role = newRole;

            // Reload users to reflect changes
            await LoadUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user role: {ex}");
        }
    }

    private async Task ToggleUserStatus(UserViewModel user, object? isChecked)
    {
        try
        {
            var appUser = await DbContext.ApplicationUsers.FindAsync(user.Id);
            if (appUser != null)
            {
                var newStatus = (bool)(isChecked ?? false);
                appUser.IsActive = newStatus;
                await DbContext.SaveChangesAsync();
                user.IsActive = newStatus;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling user status: {ex}");
        }
    }

    private void ShowResetPasswordModal(UserViewModel user)
    {
        _userToDelete = user;
        _showResetPasswordModal = true;
    }

    private void CloseResetPasswordModal()
    {
        _showResetPasswordModal = false;
        _newPassword = "";
        _confirmPassword = "";
    }

    private async Task ResetPassword()
    {
        if (_userToDelete == null) return;

        if (_newPassword != _confirmPassword)
        {
            // Show error
            return;
        }

        try
        {
            var identityUser = await UserManager.FindByEmailAsync(_userToDelete.Email);
            if (identityUser != null)
            {
                var token = await UserManager.GeneratePasswordResetTokenAsync(identityUser);
                var result = await UserManager.ResetPasswordAsync(identityUser, token, _newPassword);
                if (result.Succeeded)
                {
                    CloseResetPasswordModal();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting password: {ex}");
        }
    }

    private void ShowDeleteConfirmation(UserViewModel user)
    {
        _userToDelete = user;
        _showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        _showDeleteModal = false;
        _userToDelete = null;
    }

    private async Task DeleteUser()
    {
        if (_userToDelete == null) return;

        try
        {
            var identityUser = await UserManager.FindByEmailAsync(_userToDelete.Email);
            if (identityUser != null)
            {
                var result = await UserManager.DeleteAsync(identityUser);
                if (result.Succeeded)
                {
                    var appUser = await DbContext.ApplicationUsers.FindAsync(_userToDelete.Id);
                    if (appUser != null)
                    {
                        DbContext.ApplicationUsers.Remove(appUser);
                        await DbContext.SaveChangesAsync();
                    }
                    await LoadUsers();
                }
            }
            CloseDeleteModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex}");
        }
    }

    private class UserViewModel
    {
        public Guid Id { get; set; }
        public string UserName { get; set; } = "";
        public string Email { get; set; } = "";
        // Role is only for display and UI, not persisted in ApplicationUser
        public string Role { get; set; } = "";
        public bool IsActive { get; set; }
        public DateTime? LastLogin { get; set; }
    }
} 