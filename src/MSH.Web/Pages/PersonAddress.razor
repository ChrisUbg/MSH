@page "/addresses"
@using MSH.Infrastructure.Data
@using MSH.Infrastructure.Data.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IWebHostEnvironment env

<h3>Address Management</h3>

<EditForm Model="@newAddress" OnValidSubmit="@AddAddress">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Street</label>
        <InputText @bind-Value="newAddress.Street" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">City</label>
        <InputText @bind-Value="newAddress.City" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Postal Code</label>
        <InputText @bind-Value="newAddress.PostalCode" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Country</label>
        <InputSelect @bind-Value="newAddress.CountryId" class="form-control">
            <option value="">-- Select Country --</option>
            @foreach (var country in countries)
            {
                <option value="@country.Id">@country.CountryName</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Street</th>
            <th>City</th>
            <th>Postal Code</th>
            <th>Country</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var address in addresses)
        {
            <tr>
                <td>@address.Id</td>
                <td>@address.Street</td>
                <td>@address.City</td>
                <td>@address.PostalCode</td>
                <td>@(address.Country?.CountryName ?? "N/A")</td>
                <td>
                    <button @onclick="@(() => DeleteAddress(address.Id))" class="btn btn-danger">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<p>Current Environment: @env.EnvironmentName</p>

@code {
    private List<Address> addresses = new();
    private List<Country> countries = new();
    private Address newAddress = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        addresses = await DbContext.Addresses.Include(a => a.Country).ToListAsync();
        countries = await DbContext.Countries.ToListAsync();
        StateHasChanged();
    }

    private async Task AddAddress()
    {
        DbContext.Addresses.Add(newAddress);
        await DbContext.SaveChangesAsync();
        newAddress = new Address();
        await LoadData();
    }

    private async Task DeleteAddress(int id)
    {
        var address = await DbContext.Addresses.FindAsync(id);
        if (address != null)
        {
            DbContext.Addresses.Remove(address);
            await DbContext.SaveChangesAsync();
            await LoadData();
        }
    }
}
