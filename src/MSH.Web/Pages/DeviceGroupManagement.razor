@namespace MSH.Web.Pages
@page "/device-groups"
@using MSH.Infrastructure.Entities
@using MSH.Web.Services
@using MSH.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject IDeviceGroupService DeviceGroupService
@inject IDeviceService DeviceService
@inject ApplicationDbContext _context

<h1>Device Group Management</h1>

<button class="btn btn-primary" @onclick="ShowAddGroupModal">Add Device Group</button>

@if (deviceGroups == null)
{
    <p>Loading...</p>
}
else if (!deviceGroups.Any())
{
    <p>No device groups found.</p>
}
else
{
    <div class="row mt-4">
        @foreach (var group in deviceGroups)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">@group.Name</h5>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-secondary" @onclick="() => ShowEditGroupModal(group)">Edit</button>
                            <button class="btn btn-sm btn-info" @onclick="async () => await ShowAssignDevicesModal(group)">Assign Devices</button>
                            <button class="btn btn-sm btn-warning" @onclick="() => ShowTimeDelayModal(group)">Time Delay</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDeleteGroup(group.Id)">Delete</button>
                            @* @if (group.DeviceGroupMembers.Any(dgm => dgm.Device.DeviceType?.Name == "Light"))
                            {
                                <button class="btn btn-sm btn-primary" @onclick="async () => await ShowGroupControlModal(group)">Control</button>
                            } *@
                        </div>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@group.Description</p>
                        
                        <GroupHealthStatusCard GroupId="@group.Id" />
                        
                        <div class="mt-3">
                            <h6>Devices (@group.Devices.Count)</h6>
                            @if (group.Devices.Any())
                            {
                                <ul class="list-unstyled mb-0">
                                    @foreach (var device in group.Devices)
                                    {
                                        <li>
                                            <strong>@device.Name</strong>
                                            (@device.DeviceType?.Name)
                                            @if (device.Room != null)
                                            {
                                                <span>- @device.Room.Name</span>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span>No devices</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Add/Edit Group Modal -->
@if (showGroupModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick:stopPropagation="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingGroup?.Id == Guid.Empty) ? "Add Device Group" : "Edit Device Group")</h5>
                    <button type="button" class="btn-close" @onclick="HideGroupModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" @bind="editingGroup.Name" required />
                        <div class="invalid-feedback">Name is required.</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" @bind="editingGroup.Description" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideGroupModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveGroup">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Assign Devices Modal -->
@if (showAssignDevicesModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick:stopPropagation="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Devices to @selectedGroup?.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideAssignDevicesModal"></button>
                </div>
                <div class="modal-body">
                    @if (availableDevices == null)
                    {
                        <p>Loading devices...</p>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var device in availableDevices)
                            {
                                <div class="list-group-item">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox"
                                               checked="@selectedDeviceIds.Contains(device.Id)"
                                               @onchange="(e) => ToggleDeviceSelection(device.Id, ((ChangeEventArgs)e).Value)" />
                                        <label class="form-check-label">
                                            @device.Name (@device.DeviceType?.Name)
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAssignDevicesModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveDeviceAssignments">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirm)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick:stopPropagation="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteConfirm"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this device group?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirm">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteGroup">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Group Control Modal -->
@if (showGroupControlModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick:stopPropagation="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Control Group: @selectedGroup?.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideGroupControlModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" 
                                   checked="@groupState.ContainsKey("isOn") && (bool)groupState[isOn]"
                                   @onchange="(e) => OnGroupToggle(e)" />
                            <label class="form-check-label">Power</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Brightness: @(groupState.ContainsKey("brightness") ? groupState["brightness"] : 0)%</label>
                        <input type="range" class="form-range" min="0" max="100" 
                               value="@(groupState.ContainsKey("brightness") ? groupState["brightness"] : 0)"
                               @onchange="(e) => OnGroupBrightnessChange(e.Value)" />
                    </div>
                    <div class="mb-3">
                        <label>Color: </label>
                        <input type="color" class="form-control form-control-color" 
                               value="@(groupState.ContainsKey("color") ? groupState["color"] : "#ffffff")"
                               @onchange="(e) => OnGroupColorChange(e.Value)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideGroupControlModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Time Delay Modal -->
@if (showTimeDelayModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick:stopPropagation="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Schedule Time Delay Action: @selectedGroup?.Name</h5>
                    <button type="button" class="btn-close" @onclick="HideTimeDelayModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Action Type</label>
                        <select class="form-select" @bind="selectedActionType">
                            <option value="on">Turn On</option>
                            <option value="off">Turn Off</option>
                            <option value="toggle">Toggle</option>
                            <option value="brightness">Set Brightness</option>
                            <option value="color">Set Color</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Delay (seconds)</label>
                        <input type="number" class="form-control" @bind="delaySeconds" min="1" max="3600" />
                        <div class="form-text">Delay before executing the action (1-3600 seconds)</div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="isRecurring" />
                            <label class="form-check-label">Recurring Action</label>
                        </div>
                    </div>
                    
                    @if (isRecurring)
                    {
                        <div class="mb-3">
                            <label class="form-label">Recurrence Interval (seconds)</label>
                            <input type="number" class="form-control" @bind="recurrenceIntervalSeconds" min="10" max="86400" />
                            <div class="form-text">Interval between recurring executions (10-86400 seconds)</div>
                        </div>
                    }
                    
                    @if (selectedActionType == "brightness")
                    {
                        <div class="mb-3">
                            <label class="form-label">Brightness Level</label>
                            <input type="range" class="form-range" min="0" max="100" value="50" @onchange="OnBrightnessChange" />
                            <div class="text-center">@brightnessLevel%</div>
                        </div>
                    }
                    
                    @if (selectedActionType == "color")
                    {
                        <div class="mb-3">
                            <label class="form-label">Color</label>
                            <input type="color" class="form-control form-control-color" value="#ffffff" @onchange="OnColorChange" />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideTimeDelayModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ScheduleTimeDelayAction">Schedule Action</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DeviceGroup> deviceGroups = new List<DeviceGroup>();
    private List<Device> availableDevices = new List<Device>();
    private DeviceGroup selectedGroup = new DeviceGroup { Id = Guid.NewGuid() };
    private HashSet<Guid> selectedDeviceIds = new();
    private DeviceGroup editingGroup = new() { Id = Guid.Empty };
    private bool showGroupModal;
    private bool showAssignDevicesModal;
    private bool showDeleteConfirm;
    private Guid groupIdToDelete;
    private bool showGroupControlModal;
    private bool showTimeDelayModal;
    private Dictionary<string, object> groupState = new();
    
    // Time delay properties
    private string selectedActionType = "on";
    private int delaySeconds = 5;
    private bool isRecurring = false;
    private int recurrenceIntervalSeconds = 60;
    private int brightnessLevel = 50;
    private string selectedColor = "#ffffff";

    protected override async Task OnInitializedAsync()
    {
        await LoadDeviceGroups();
    }

    private async Task LoadDeviceGroups()
    {
        deviceGroups = (await DeviceGroupService.GetDeviceGroupsAsync()).ToList();
    }

    private async Task LoadAvailableDevices()
    {
        var devices = await DeviceService.GetDevicesAsync();
        availableDevices = devices?.ToList() ?? new List<Device>();
    }

    private void ShowAddGroupModal()
    {
        editingGroup = new DeviceGroup();
        showGroupModal = true;
    }

    private void ShowEditGroupModal(DeviceGroup group)
    {
        editingGroup = new DeviceGroup
        {
            Id = group.Id,
            Name = group.Name,
            Description = group.Description
        };
        showGroupModal = true;
    }

    private void HideGroupModal()
    {
        showGroupModal = false;
    }

    private async Task SaveGroup()
    {
        // Get the admin user's ID
        //r adminUser = await _context.ApplicationUsers.FirstOrDefaultAsync(u => u.UserName == "admin");
        //if (adminUser != null)
        if (true)
        {
            if (editingGroup.Id == Guid.Empty)
            {
                editingGroup.CreatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61";
                editingGroup.UpdatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61";
                await DeviceGroupService.AddDeviceGroupAsync(editingGroup);
            }
            else
            {
                editingGroup.UpdatedById = "bb1be326-f26e-4684-bbf5-5c3df450dc61";
                await DeviceGroupService.UpdateDeviceGroupAsync(editingGroup);
            }
            showGroupModal = false;
            await LoadDeviceGroups();
        }
        else
        {
            // Handle case where admin user doesn't exist
            // You might want to show an error message to the user
        }
    }

    private async Task ShowAssignDevicesModal(DeviceGroup group)
    {
        selectedGroup = group;
        // selectedDeviceIds = new HashSet<Guid>(group.DeviceGroupMembers.Select(dgm => dgm.Device.Id));
        selectedDeviceIds = new HashSet<Guid>();
        showAssignDevicesModal = true;
        await LoadAvailableDevices();
    }

    private void HideAssignDevicesModal()
    {
        showAssignDevicesModal = false;
    }

    private void ToggleDeviceSelection(Guid deviceId, object? isChecked)
    {
        if (isChecked is bool checkedValue)
        {
            if (checkedValue)
            {
                selectedDeviceIds.Add(deviceId);
            }
            else
            {
                selectedDeviceIds.Remove(deviceId);
            }
        }
    }

    private async Task SaveDeviceAssignments()
    {
        await DeviceGroupService.SetDevicesForGroupAsync(selectedGroup.Id, selectedDeviceIds.ToList());
        showAssignDevicesModal = false;
        await LoadDeviceGroups();
    }

    private void ConfirmDeleteGroup(Guid groupId)
    {
        groupIdToDelete = groupId;
        showDeleteConfirm = true;
    }

    private void HideDeleteConfirm()
    {
        showDeleteConfirm = false;
    }

    private async Task DeleteGroup()
    {
        await DeviceGroupService.DeleteDeviceGroupAsync(groupIdToDelete);
        showDeleteConfirm = false;
        await LoadDeviceGroups();
    }

    private async Task ShowGroupControlModal(DeviceGroup group)
    {
        selectedGroup = group;
        showGroupControlModal = true;
        await LoadGroupState();
    }

    private void HideGroupControlModal()
    {
        showGroupControlModal = false;
    }

    private async Task LoadGroupState()
    {
        if (selectedGroup != null)
        {
            groupState = await DeviceGroupService.GetGroupStateAsync(selectedGroup.Id);
        }
    }

    private async Task OnGroupToggle(ChangeEventArgs e)
    {
        if (e.Value is bool isOn)
        {
            await DeviceGroupService.SetGroupStateAsync(selectedGroup.Id, isOn ? "On" : "Off");
            groupState["isOn"] = isOn;
        }
    }

    private async Task OnGroupBrightnessChange(object? value)
    {
        if (value is int brightness && selectedGroup != null)
        {
            await DeviceGroupService.SetGroupBrightnessAsync(selectedGroup.Id, brightness);
            await LoadGroupState();
        }
    }

    private async Task OnGroupColorChange(object? value)
    {
        if (value is string color && selectedGroup != null)
        {
            await DeviceGroupService.SetGroupColorAsync(selectedGroup.Id, color);
            await LoadGroupState();
        }
    }

    private async Task SetGroupState(string state)
    {
        if (selectedGroup != null)
        {
            await DeviceGroupService.SetGroupStateAsync(selectedGroup.Id, state);
            await LoadGroupState();
        }
    }

    private async Task SetGroupBrightness(int brightness)
    {
        if (selectedGroup != null)
        {
            await DeviceGroupService.SetGroupBrightnessAsync(selectedGroup.Id, brightness);
            await LoadGroupState();
        }
    }

    private async Task SetGroupColor(string color)
    {
        if (selectedGroup != null)
        {
            await DeviceGroupService.SetGroupColorAsync(selectedGroup.Id, color);
            await LoadGroupState();
        }
    }
    
    // Time delay methods
    private void ShowTimeDelayModal(DeviceGroup group)
    {
        selectedGroup = group;
        showTimeDelayModal = true;
        
        // Reset form values
        selectedActionType = "on";
        delaySeconds = 5;
        isRecurring = false;
        recurrenceIntervalSeconds = 60;
        brightnessLevel = 50;
        selectedColor = "#ffffff";
    }
    
    private void HideTimeDelayModal()
    {
        showTimeDelayModal = false;
    }
    
    private async Task ScheduleTimeDelayAction()
    {
        try
        {
            // Build parameters JSON
            var parameters = new Dictionary<string, object>();
            if (selectedActionType == "brightness")
            {
                parameters["brightness"] = brightnessLevel;
            }
            else if (selectedActionType == "color")
            {
                parameters["color"] = selectedColor;
            }
            
            var parametersJson = System.Text.Json.JsonSerializer.Serialize(parameters);
            
            // TODO: Integrate with IDeviceActionDelayService
            // await _deviceActionDelayService.ScheduleDeviceGroupActionAsync(
            //     selectedGroup.Id, 
            //     selectedActionType, 
            //     delaySeconds, 
            //     parametersJson);
            
            // For now, just show a success message
            // You can add a toast notification here
            Console.WriteLine($"Scheduled {selectedActionType} action for group {selectedGroup?.Name} with {delaySeconds}s delay");
            
            showTimeDelayModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scheduling time delay action: {ex.Message}");
        }
    }
    
    private void OnBrightnessChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            brightnessLevel = value;
        }
    }
    
    private void OnColorChange(ChangeEventArgs e)
    {
        selectedColor = e.Value?.ToString() ?? "#ffffff";
    }
} 