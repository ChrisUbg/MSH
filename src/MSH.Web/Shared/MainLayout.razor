@namespace MSH.Web.Shared
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject SignInManager<IdentityUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<PageTitle>MSH - Matter Smart Home</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex align-items-center">
                        <span class="me-3">@context.User.Identity?.Name</span>
                        <button class="btn btn-link" @onclick="Logout">Logout</button>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <a href="/Auth/Login" class="btn btn-link">Login</a>
                    <a href="/Auth/Register" class="btn btn-link">Register</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<style>
    .page {
        position: relative;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    main {
        flex: 1;
    }

    .sidebar {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        width: 250px;
        position: sticky;
        top: 0;
        height: 100vh;
    }

    .top-row {
        background-color: #f7f7f7;
        border-bottom: 1px solid #d6d5d5;
        justify-content: flex-end;
        height: 3.5rem;
        display: flex;
        align-items: center;
    }

    .top-row ::deep a, .top-row ::deep .btn-link {
        white-space: nowrap;
        margin-left: 1.5rem;
        text-decoration: none;
    }

    .top-row ::deep a:hover, .top-row ::deep .btn-link:hover {
        text-decoration: underline;
    }

    .top-row ::deep a:first-child {
        overflow: hidden;
        text-overflow: ellipsis;
    }

    @@media (min-width: 641px) {
        .page {
            flex-direction: row;
        }

        .sidebar {
            width: 250px;
            height: 100vh;
            position: sticky;
            top: 0;
        }

        .top-row {
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .top-row.auth ::deep a:first-child {
            flex: 1;
            text-align: right;
            width: 0;
        }
    }
</style>

@code {
    private async Task Logout()
    {
        try
        {
            var response = await Http.PostAsync("api/shared/logout", null);
            if (response.IsSuccessStatusCode)
            {
                // Force a full page reload to clear all state
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                Console.WriteLine($"Logout failed with status code: {response.StatusCode}");
                // Fallback to direct navigation
                NavigationManager.NavigateTo("/", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex}");
            // Fallback to direct navigation if the API call fails
            NavigationManager.NavigateTo("/", true);
        }
    }
}
